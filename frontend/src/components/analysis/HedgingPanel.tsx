import React, { useState, useEffect } from 'react';
import { Card } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';
import { Shield, Plus, X, Info, Save } from 'lucide-react';
import { hedgingApi } from '@/lib/api';
import { toast } from 'react-hot-toast';
import { getInstrumentPremium, getAvailableStrikes, getAvailableTerms, formatPremium } from '@/types/quotes';

export interface HedgingInstrument {
  id: string;
  name: string;
  type: 'IRS' | 'CAP' | 'FLOOR' | 'FLOOR_SELL' | 'COLLAR' | 'SWAP';
  description: string;
  parameters: {
    notional?: number;
    hedgePercentage?: number; // –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ –Ω–æ–º–∏–Ω–∞–ª–∞ (5-100%)
    hedgingTerm?: number; // –°—Ä–æ–∫ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –º–µ—Å—è—Ü–∞—Ö (1-60)
    strike?: number;
    cap?: number;
    floor?: number;
    fixedRate?: number;
    floatingBaseType?: 'KEY_RATE' | 'RUONIA'; // –¢–∏–ø –±–∞–∑–æ–≤–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–≤–æ–ø–∞ –∏–∑ —Ñ–∏–∫—Å–∞ –≤ –ø–ª–∞–≤–∞—é—â—É—é
    creditSpread?: number; // –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è —Å–≤–æ–ø–∞ –∏–∑ —Ñ–∏–∫—Å–∞ –≤ –ø–ª–∞–≤–∞—é—â—É—é
    maturity?: string;
    cost?: number;
    costType?: 'upfront' | 'annual'; // upfront - –≤ –¥–∞—Ç—É –∑–∞–∫–ª—é—á–µ–Ω–∏—è, annual - –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≥–æ–¥–æ–≤—ã—Ö
  };
  effect: number; // –ü—Ä–æ—Ü–µ–Ω—Ç —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–∞
}

interface HedgingPanelProps {
  selectedInstruments: HedgingInstrument[];
  onInstrumentsChange: (instruments: HedgingInstrument[]) => void;
  totalPrincipal: number;
  currency?: string;
  enableSave?: boolean;
  selectedCreditTypes?: Set<'KEY_RATE' | 'FIXED'>;
}

const AVAILABLE_INSTRUMENTS: Omit<HedgingInstrument, 'id' | 'parameters'>[] = [
  {
    name: '–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Å–≤–æ–ø (IRS)',
    type: 'IRS',
    description: '–û–±–º–µ–Ω —Ç–∏–ø–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏',
    effect: 0.85
  },
  {
    name: '–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –∫—ç–ø (CAP)',
    type: 'CAP',
    description: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏',
    effect: 0.6
  },
  {
    name: '–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ñ–ª–æ—Ä (FLOOR) - –ü–æ–∫—É–ø–∫–∞',
    type: 'FLOOR',
    description: '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø–∞–¥–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫)',
    effect: 0.4
  },
  {
    name: '–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ñ–ª–æ—Ä (FLOOR) - –ü—Ä–æ–¥–∞–∂–∞',
    type: 'FLOOR_SELL',
    description: '–ü—Ä–æ–¥–∞–∂–∞ –æ–ø—Ü–∏–æ–Ω–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É (–ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–º–∏–∏)',
    effect: -0.3
  },
  {
    name: '–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –∫–æ–ª–ª–∞—Ä (COLLAR)',
    type: 'COLLAR',
    description: '–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –∫—ç–ø–∞ –∏ —Ñ–ª–æ—Ä–∞',
    effect: 0.7
  },
  {
    name: '–í–∞–ª—é—Ç–Ω–æ-–ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Å–≤–æ–ø',
    type: 'SWAP',
    description: '–û–±–º–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç–∞—Ö',
    effect: 0.75
  }
];

export function HedgingPanel({ 
  selectedInstruments, 
  onInstrumentsChange, 
  totalPrincipal,
  currency = 'RUB',
  enableSave = false,
  selectedCreditTypes = new Set()
}: HedgingPanelProps) {
  const [showAddForm, setShowAddForm] = useState(false);
  const [selectedType, setSelectedType] = useState<string>('');
  const [parameters, setParameters] = useState<any>({});
  const [isSaving, setIsSaving] = useState(false);
  const [validationErrors, setValidationErrors] = useState<{[key: string]: boolean}>({});
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–æ–≤ –∫—Ä–µ–¥–∏—Ç–æ–≤
  const getAvailableInstruments = () => {
    // –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –∫—Ä–µ–¥–∏—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    if (selectedCreditTypes.size === 0) {
      return AVAILABLE_INSTRUMENTS;
    }
    
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Ç–æ–ª—å–∫–æ –∫—Ä–µ–¥–∏—Ç—ã —Å –ø–ª–∞–≤–∞—é—â–µ–π —Å—Ç–∞–≤–∫–æ–π
    if (selectedCreditTypes.has('KEY_RATE') && !selectedCreditTypes.has('FIXED')) {
      // –î–æ—Å—Ç—É–ø–Ω—ã: IRS (–ø–ª–∞–≤–∞—é—â–∞—è ‚Üí —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è), CAP, FLOOR_SELL, COLLAR, SWAP
      return AVAILABLE_INSTRUMENTS.filter(inst => 
        inst.type !== 'FLOOR' // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–∫—É–ø–∫—É —Ñ–ª–æ—Ä–∞
      );
    }
    
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Ç–æ–ª—å–∫–æ –∫—Ä–µ–¥–∏—Ç—ã —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π
    if (selectedCreditTypes.has('FIXED') && !selectedCreditTypes.has('KEY_RATE')) {
      // –î–æ—Å—Ç—É–ø–Ω—ã: IRS (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ‚Üí –ø–ª–∞–≤–∞—é—â–∞—è), FLOOR (–ø–æ–∫—É–ø–∫–∞), SWAP
      // –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã: CAP, FLOOR_SELL, COLLAR
      return AVAILABLE_INSTRUMENTS.filter(inst => 
        inst.type === 'IRS' || 
        inst.type === 'FLOOR' || 
        inst.type === 'SWAP'
      );
    }
    
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –æ–±–∞ —Ç–∏–ø–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ (—Å–º–µ—à–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å)
    if (selectedCreditTypes.has('KEY_RATE') && selectedCreditTypes.has('FIXED')) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏
      return AVAILABLE_INSTRUMENTS;
    }
    
    return AVAILABLE_INSTRUMENTS;
  };

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const validateFields = () => {
    const errors: {[key: string]: boolean} = {};
    
    if (selectedType === 'CAP') {
      if (!parameters.cap || parameters.cap <= 0) {
        errors.cap = true;
      } else {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ 0.25
        const remainder = (parameters.cap * 4) % 1;
        if (remainder !== 0) {
          errors.cap = true;
        }
      }
      // –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º cost –¥–ª—è CAP, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    } else if (selectedType === 'FLOOR' || selectedType === 'FLOOR_SELL') {
      if (!parameters.floor || parameters.floor <= 0) errors.floor = true;
      if (!parameters.cost || parameters.cost <= 0) errors.cost = true;
    } else if (selectedType === 'COLLAR') {
      if (!parameters.cap || parameters.cap <= 0) errors.cap = true;
      if (!parameters.floor || parameters.floor <= 0) errors.floor = true;
      if (parameters.floor >= parameters.cap) {
        errors.floor = true;
        errors.cap = true;
      }
      if (!parameters.cost || parameters.cost <= 0) errors.cost = true;
    } else if (selectedType === 'IRS' || selectedType === 'SWAP') {
      // –î–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞–≤–∞—é—â–µ–π —Å—Ç–∞–≤–∫–∏
      if (selectedCreditTypes.has('FIXED') && !selectedCreditTypes.has('KEY_RATE')) {
        if (!parameters.floatingBaseType) errors.floatingBaseType = true;
        if (parameters.creditSpread === undefined || parameters.creditSpread < 0) errors.creditSpread = true;
      } else {
        // –î–ª—è –ø–ª–∞–≤–∞—é—â–∏—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É
        if (!parameters.fixedRate || parameters.fixedRate <= 0) errors.fixedRate = true;
      }
    }
    
    console.log(`üìù –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è ${selectedType}:`, { parameters, errors });
    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏–∏ –¥–ª—è CAP
  const calculateCapPremium = (strike: number, termMonths: number) => {
    const termYears = termMonths / 12; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
    const premium = getInstrumentPremium('CAP', strike, termYears);
    
    if (premium !== null) {
      const calculatedCost = parameters.costType === 'upfront' 
        ? Math.round((parameters.notional || totalPrincipal) * premium)
        : Math.round(premium * 100 * 100) / 100; // Convert to percentage points and round to 2 decimals
        
      setParameters(prev => ({
        ...prev,
        cost: calculatedCost,
        premium: premium // Store raw premium for reference
      }));
      
    } else {
      toast.error('–ö–æ—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å—Ç—Ä–∞–π–∫–∞ –∏ —Å—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  };

  // Effect –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–∏ CAP –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  useEffect(() => {
    if (selectedType === 'CAP' && parameters.cap && parameters.hedgingTerm) {
      calculateCapPremium(parameters.cap, parameters.hedgingTerm);
    }
  }, [selectedType, parameters.cap, parameters.hedgingTerm, parameters.costType, parameters.notional, totalPrincipal]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã
  const isFormValid = () => {
    if (!selectedType) return false;
    
    if (selectedType === 'CAP') {
      if (!parameters.cap || parameters.cap <= 0) return false;
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ 0.25
      const remainder = (parameters.cap * 4) % 1;
      return remainder === 0;
    } else if (selectedType === 'FLOOR' || selectedType === 'FLOOR_SELL') {
      return parameters.floor > 0 && parameters.cost > 0;
    } else if (selectedType === 'COLLAR') {
      return parameters.cap > 0 && parameters.floor > 0 && parameters.floor < parameters.cap && parameters.cost > 0;
    } else if (selectedType === 'IRS' || selectedType === 'SWAP') {
      if (selectedCreditTypes.has('FIXED') && !selectedCreditTypes.has('KEY_RATE')) {
        return !!parameters.floatingBaseType && parameters.creditSpread >= 0;
      } else {
        return parameters.fixedRate > 0;
      }
    }
    
    return false;
  };

  const handleAddInstrument = () => {
    const availableInstruments = getAvailableInstruments();
    const instrument = availableInstruments.find(i => i.type === selectedType);
    if (!instrument) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –æ—à–∏–±–∫–∏
    if (!validateFields()) {
      console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –û—à–∏–±–∫–∏:', validationErrors);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è CAP
      if (selectedType === 'CAP' && validationErrors.cap && parameters.cap) {
        const remainder = (parameters.cap * 4) % 1;
        if (remainder !== 0) {
          toast.error('–°—Ç—Ä–∞–π–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–µ–Ω 0.25% (–Ω–∞–ø—Ä–∏–º–µ—Ä: 16.00, 16.25, 16.50, 16.75)');
          return;
        }
      }
      
      toast.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return;
    }

    const newInstrument: HedgingInstrument = {
      ...instrument,
      id: Date.now().toString(),
      parameters: {
        notional: parameters.notional || totalPrincipal,
        ...parameters
      }
    };

    onInstrumentsChange([...selectedInstruments, newInstrument]);
    setShowAddForm(false);
    setSelectedType('');
    setParameters({});
    setValidationErrors({});
    toast.success(`${instrument.name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω`);
  };

  const handleRemoveInstrument = (id: string) => {
    onInstrumentsChange(selectedInstruments.filter(i => i.id !== id));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSS –∫–ª–∞—Å—Å–æ–≤ –ø–æ–ª—è —Å —É—á–µ—Ç–æ–º –æ—à–∏–±–æ–∫
  const getInputClassName = (fieldName: string) => {
    const baseClass = "w-full px-3 py-2 border-2 rounded-md text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 transition-colors";
    const normalClass = "border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 focus:ring-indigo-500 focus:border-indigo-500";
    const errorClass = "border-red-500 dark:border-red-400 bg-red-50 dark:bg-red-900/30 focus:ring-red-500 focus:border-red-500 animate-pulse";
    
    const hasError = validationErrors[fieldName];
    if (hasError) {
      console.log(`üî¥ –ü–æ–ª–µ ${fieldName} –ø–æ–¥—Å–≤–µ—á–µ–Ω–æ –∫—Ä–∞—Å–Ω—ã–º`);
    }
    
    return `${baseClass} ${hasError ? errorClass : normalClass}`;
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: currency
    }).format(amount);
  };

  const getTotalHedgingEffect = () => {
    if (selectedInstruments.length === 0) return 0;
    
    // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Å —É—á–µ—Ç–æ–º –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const totalEffect = selectedInstruments.reduce((acc, inst) => {
      return acc + inst.effect * (1 - acc);
    }, 0);
    
    return Math.min(totalEffect * 100, 95); // –ú–∞–∫—Å–∏–º—É–º 95% —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
  };

  const handleSaveInstruments = async () => {
    if (!enableSave || selectedInstruments.length === 0) return;
    
    setIsSaving(true);
    try {
      const savePromises = selectedInstruments
        .filter(inst => !inst.id.includes('saved_')) // Only save unsaved instruments
        .map(async (instrument) => {
          const apiData = {
            name: instrument.name,
            instrument_type: instrument.type,
            description: instrument.description,
            notional_amount: instrument.parameters.notional || totalPrincipal,
            currency: currency,
            parameters: {
              ...instrument.parameters,
              notional: undefined // Remove from parameters as it's a separate field
            },
            hedge_effectiveness: instrument.effect
          };
          
          const response = await hedgingApi.createInstrument(apiData);
          return {
            ...instrument,
            id: `saved_${response.data.id}` // Mark as saved
          };
        });
      
      const savedInstruments = await Promise.all(savePromises);
      
      // Update instruments with saved IDs
      const updatedInstruments = selectedInstruments.map(inst => {
        const saved = savedInstruments.find(s => s.name === inst.name && s.type === inst.type);
        return saved || inst;
      });
      
      onInstrumentsChange(updatedInstruments);
      toast.success(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedInstruments.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è`);
    } catch (error) {
      console.error('Error saving hedging instruments:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è');
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <Card className="p-6">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center">
          <Shield className="h-5 w-5 text-indigo-600 mr-2" />
          <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
            –•–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
          </h2>
        </div>
        <div className="flex space-x-2">
          {enableSave && selectedInstruments.length > 0 && (
            <Button
              onClick={handleSaveInstruments}
              variant="outline"
              size="sm"
              icon={Save}
              disabled={isSaving}
            >
              {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
            </Button>
          )}
          <Button
            onClick={() => setShowAddForm(true)}
            variant="primary"
            size="sm"
            icon={Plus}
          >
            –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
          </Button>
        </div>
      </div>

      {selectedInstruments.length === 0 && !showAddForm && (
        <div className="text-center py-8 text-gray-500 dark:text-gray-400">
          <Shield className="h-12 w-12 mx-auto mb-3 opacity-30" />
          <p>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω—ã</p>
          {getAvailableInstruments().length === 0 ? (
            <div className="mt-2">
              <p className="text-sm text-yellow-600 dark:text-yellow-400">
                {selectedCreditTypes.has('FIXED') && !selectedCreditTypes.has('KEY_RATE') 
                  ? '–î–ª—è –∫—Ä–µ–¥–∏—Ç–æ–≤ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∫–∞ —Ñ–ª–æ—Ä–∞'
                  : '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è'
                }
              </p>
            </div>
          ) : (
            <p className="text-sm mt-2">–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ —Ä–∏—Å–∫–∞</p>
          )}
        </div>
      )}

      {selectedInstruments.length > 0 && (
        <div className="space-y-3 mb-4">
          {selectedInstruments.map((instrument) => (
            <div 
              key={instrument.id} 
              className="flex items-start justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg"
            >
              <div className="flex-1">
                <div className="flex items-center">
                  <span className="font-medium text-gray-900 dark:text-gray-100">
                    {instrument.name}
                  </span>
                  <span className="ml-2 text-xs bg-indigo-100 dark:bg-indigo-900 text-indigo-700 dark:text-indigo-300 px-2 py-1 rounded">
                    {instrument.type}
                  </span>
                </div>
                <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                  {instrument.type === 'IRS' ? (
                    selectedCreditTypes.has('KEY_RATE') && !selectedCreditTypes.has('FIXED') 
                      ? '–û–±–º–µ–Ω –ø–ª–∞–≤–∞—é—â–µ–π —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é'
                      : selectedCreditTypes.has('FIXED') && !selectedCreditTypes.has('KEY_RATE')
                        ? '–û–±–º–µ–Ω —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –Ω–∞ –ø–ª–∞–≤–∞—é—â—É—é'
                        : '–û–±–º–µ–Ω —Ç–∏–ø–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏'
                  ) : (
                    instrument.description
                  )}
                </p>
                <div className="text-sm text-gray-500 dark:text-gray-500 mt-1">
                  <div className="flex items-center space-x-4">
                    <span>–ù–æ–º–∏–Ω–∞–ª: {formatCurrency(instrument.parameters.notional || totalPrincipal)}</span>
                    {instrument.parameters.hedgePercentage && (
                      <span className="px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 rounded text-xs font-medium">
                        {instrument.parameters.hedgePercentage}% –ø–æ—Ä—Ç—Ñ–µ–ª—è
                      </span>
                    )}
                    {instrument.parameters.hedgingTerm && (
                      <span 
                        className="px-2 py-1 bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300 rounded text-xs font-medium"
                        title={`${instrument.parameters.hedgingTerm} –º–µ—Å—è—Ü–µ–≤`}
                      >
                        –°—Ä–æ–∫: {Math.round((instrument.parameters.hedgingTerm / 60) * 100)}%
                      </span>
                    )}
                  </div>
                  <div className="mt-1">
                    {instrument.parameters.strike && `–°—Ç—Ä–∞–π–∫: ${instrument.parameters.strike}% ‚Ä¢ `}
                    {instrument.parameters.fixedRate && `–§–∏–∫—Å. —Å—Ç–∞–≤–∫–∞: ${instrument.parameters.fixedRate}% ‚Ä¢ `}
                    {instrument.parameters.floatingBaseType && (
                      `–ë–∞–∑–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: ${instrument.parameters.floatingBaseType === 'KEY_RATE' ? '–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§' : 'RUONIA'} ‚Ä¢ `
                    )}
                    {instrument.parameters.creditSpread !== undefined && `–°–ø—Ä–µ–¥: ${instrument.parameters.creditSpread}% ‚Ä¢ `}
                    {instrument.parameters.cap && `–ú–∞–∫—Å. —Å—Ç–∞–≤–∫–∞: ${instrument.parameters.cap}% ‚Ä¢ `}
                    {instrument.parameters.floor && `–ú–∏–Ω. —Å—Ç–∞–≤–∫–∞: ${instrument.parameters.floor}% ‚Ä¢ `}
                    {instrument.parameters.cost && (
                      `${instrument.type === 'FLOOR_SELL' ? '–ü–æ–ª—É—á–∞–µ–º–∞—è –ø—Ä–µ–º–∏—è' : '–°—Ç–æ–∏–º–æ—Å—Ç—å'}: ${instrument.parameters.costType === 'upfront' 
                        ? formatCurrency(instrument.parameters.cost) 
                        : `${instrument.parameters.cost}% –≥–æ–¥–æ–≤—ã—Ö`}`
                    )}
                  </div>
                </div>
              </div>
              <button
                onClick={() => handleRemoveInstrument(instrument.id)}
                className="ml-3 text-gray-400 hover:text-red-600 transition-colors"
              >
                <X className="h-4 w-4" />
              </button>
            </div>
          ))}
        </div>
      )}

      {showAddForm && (
        <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4 mb-4">
          <h3 className="font-medium text-gray-900 dark:text-gray-100 mb-3">
            –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
          </h3>
          
          <div className="space-y-3">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                –¢–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
              </label>
              <select
                value={selectedType}
                onChange={(e) => {
                  setSelectedType(e.target.value);
                  setParameters({ hedgePercentage: 100, hedgingTerm: 12 }); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                  setValidationErrors({}); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞
                }}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md 
                         bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100
                         focus:outline-none focus:ring-2 focus:ring-indigo-500"
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç...</option>
                {getAvailableInstruments().map((inst) => (
                  <option key={inst.type} value={inst.type}>
                    {inst.name}
                  </option>
                ))}
              </select>
            </div>
            

            {selectedType && (
              <>
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    –î–æ–ª—è –æ—Ç –æ–±—â–µ–≥–æ –Ω–æ–º–∏–Ω–∞–ª–∞: {parameters.hedgePercentage || 100}%
                  </label>
                  <div className="space-y-2">
                    <input
                      type="range"
                      min="5"
                      max="100"
                      step="5"
                      value={parameters.hedgePercentage || 100}
                      onChange={(e) => {
                        const percentage = Number(e.target.value);
                        const notionalAmount = (totalPrincipal * percentage) / 100;
                        setParameters({ 
                          ...parameters, 
                          hedgePercentage: percentage,
                          notional: notionalAmount
                        });
                      }}
                      className="w-full h-2 bg-gray-200 dark:bg-gray-700 rounded-lg appearance-none cursor-pointer
                               [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:h-4 [&::-webkit-slider-thumb]:w-4 
                               [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-indigo-600 
                               [&::-webkit-slider-thumb]:cursor-pointer [&::-webkit-slider-thumb]:shadow-lg
                               [&::-moz-range-thumb]:h-4 [&::-moz-range-thumb]:w-4 [&::-moz-range-thumb]:rounded-full 
                               [&::-moz-range-thumb]:bg-indigo-600 [&::-moz-range-thumb]:cursor-pointer 
                               [&::-moz-range-thumb]:border-none [&::-moz-range-thumb]:shadow-lg"
                    />
                    <div className="flex justify-between text-xs text-gray-500 dark:text-gray-400">
                      <span>5%</span>
                      <span className="font-medium text-gray-700 dark:text-gray-300">
                        {formatCurrency((parameters.hedgePercentage || 100) * totalPrincipal / 100)}
                      </span>
                      <span>100%</span>
                    </div>
                  </div>

                  <div className="mt-4">
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      –°—Ä–æ–∫ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è: {Math.round(((parameters.hedgingTerm || 12) / 60) * 100)}%
                    </label>
                    <div className="space-y-2">
                      <input
                        type="range"
                        min="1"
                        max="60"
                        step="1"
                        value={parameters.hedgingTerm || 12}
                        onChange={(e) => {
                          const term = Number(e.target.value);
                          setParameters({ 
                            ...parameters, 
                            hedgingTerm: term
                          });
                        }}
                        className="w-full h-2 bg-gray-200 dark:bg-gray-700 rounded-lg appearance-none cursor-pointer
                                 [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:h-4 [&::-webkit-slider-thumb]:w-4 
                                 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-green-600 
                                 [&::-webkit-slider-thumb]:cursor-pointer [&::-webkit-slider-thumb]:shadow-lg
                                 [&::-moz-range-thumb]:h-4 [&::-moz-range-thumb]:w-4 [&::-moz-range-thumb]:rounded-full 
                                 [&::-moz-range-thumb]:bg-green-600 [&::-moz-range-thumb]:cursor-pointer 
                                 [&::-moz-range-thumb]:border-none [&::-moz-range-thumb]:shadow-lg"
                      />
                      <div className="flex justify-between text-xs text-gray-500 dark:text-gray-400">
                        <span>2%</span>
                        <span className="font-medium text-gray-700 dark:text-gray-300">
                          {parameters.hedgingTerm || 12} –º–µ—Å.
                        </span>
                        <span>100%</span>
                      </div>
                    </div>
                  </div>
                </div>

                {(selectedType === 'IRS' || selectedType === 'SWAP') && (
                  <>
                    {/* –î–ª—è –∫—Ä–µ–¥–∏—Ç–æ–≤ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π - –≤–≤–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞–≤–∞—é—â–µ–π */}
                    {selectedCreditTypes.has('FIXED') && !selectedCreditTypes.has('KEY_RATE') ? (
                      <>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            –ë–∞–∑–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–ª–∞–≤–∞—é—â–µ–π —Å—Ç–∞–≤–∫–∏
                          </label>
                          <select
                            value={parameters.floatingBaseType || ''}
                            onChange={(e) => {
                              setParameters({ ...parameters, floatingBaseType: e.target.value });
                              setValidationErrors({ ...validationErrors, floatingBaseType: false });
                            }}
                            className={getInputClassName('floatingBaseType')}
                          >
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä...</option>
                            <option value="KEY_RATE">–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§</option>
                            <option value="RUONIA">RUONIA</option>
                          </select>
                          <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                            –ë–∞–∑–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–∞–≤–∞—é—â–µ–π —Å—Ç–∞–≤–∫–∏
                          </p>
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å–ø—Ä–µ–¥ (%)
                          </label>
                          <input
                            type="number"
                            step="0.1"
                            value={parameters.creditSpread || ''}
                            onChange={(e) => {
                              setParameters({ ...parameters, creditSpread: Number(e.target.value) });
                              setValidationErrors({ ...validationErrors, creditSpread: false });
                            }}
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 2.5"
                            className={getInputClassName('creditSpread')}
                          />
                          <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                            –ù–∞–¥–±–∞–≤–∫–∞ –∫ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ
                          </p>
                        </div>
                      </>
                    ) : (
                      /* –î–ª—è –∫—Ä–µ–¥–∏—Ç–æ–≤ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Å—Ç–∞–≤–∫–æ–π - –≤–≤–æ–¥–∏–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é */
                      <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                          –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (%)
                        </label>
                        <input
                          type="number"
                          step="0.1"
                          value={parameters.fixedRate || ''}
                          onChange={(e) => {
                            setParameters({ ...parameters, fixedRate: Number(e.target.value) });
                            setValidationErrors({ ...validationErrors, fixedRate: false });
                          }}
                          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 12.5"
                          className={getInputClassName('fixedRate')}
                        />
                      </div>
                    )}
                  </>
                )}

                {selectedType === 'CAP' && (
                  <>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (—Å—Ç—Ä–∞–π–∫, %)
                      </label>
                      <input
                        type="number"
                        step="0.25"
                        min="10"
                        max="30"
                        value={parameters.cap || ''}
                        onChange={(e) => {
                          const strike = Number(e.target.value);
                          setParameters({ ...parameters, cap: strike });
                          setValidationErrors({ ...validationErrors, cap: false });
                        }}
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 16.75"
                        className={getInputClassName('cap')}
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        –¢–∏–ø –æ–ø–ª–∞—Ç—ã
                      </label>
                      <select
                        value={parameters.costType || 'annual'}
                        onChange={(e) => {
                          setParameters({ ...parameters, costType: e.target.value as 'upfront' | 'annual' });
                        }}
                        className={getInputClassName('costType')}
                      >
                        <option value="annual">–ü—Ä–æ—Ü–µ–Ω—Ç—ã –≥–æ–¥–æ–≤—ã—Ö</option>
                        <option value="upfront">–ï–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–∏</option>
                      </select>
                    </div>

                    {parameters.cost !== undefined && (
                      <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                          {parameters.costType === 'upfront' ? '–°—Ç–æ–∏–º–æ—Å—Ç—å' : '–°—Ç–æ–∏–º–æ—Å—Ç—å (% –≥–æ–¥–æ–≤—ã—Ö)'}
                        </label>
                        <div className="w-full px-3 py-2 border-2 border-green-300 dark:border-green-600 bg-green-50 dark:bg-green-900/30 rounded-md text-gray-900 dark:text-gray-100">
                          {parameters.costType === 'upfront' 
                            ? formatCurrency(parameters.cost)
                            : `${Number(parameters.cost).toFixed(2)}%`
                          }
                        </div>
                      </div>
                    )}

                  </>
                )}

                {(selectedType === 'FLOOR' || selectedType === 'FLOOR_SELL') && (
                  <>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (%)
                      </label>
                      <input
                        type="number"
                        step="0.1"
                        value={parameters.floor || ''}
                        onChange={(e) => {
                          setParameters({ ...parameters, floor: Number(e.target.value) });
                          setValidationErrors({ ...validationErrors, floor: false });
                        }}
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 8.0"
                        className={getInputClassName('floor')}
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        –¢–∏–ø –æ–ø–ª–∞—Ç—ã
                      </label>
                      <select
                        value={parameters.costType || 'annual'}
                        onChange={(e) => {
                          setParameters({ ...parameters, costType: e.target.value as 'upfront' | 'annual' });
                        }}
                        className={getInputClassName('costType')}
                      >
                        <option value="annual">–ü—Ä–æ—Ü–µ–Ω—Ç—ã –≥–æ–¥–æ–≤—ã—Ö</option>
                        <option value="upfront">–ï–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–∏</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        {selectedType === 'FLOOR_SELL' 
                          ? (parameters.costType === 'upfront' ? '–ü–æ–ª—É—á–∞–µ–º–∞—è –ø—Ä–µ–º–∏—è (—Ä—É–±.)' : '–ü–æ–ª—É—á–∞–µ–º–∞—è –ø—Ä–µ–º–∏—è (% –≥–æ–¥–æ–≤—ã—Ö)')
                          : (parameters.costType === 'upfront' ? '–°—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)' : '–°—Ç–æ–∏–º–æ—Å—Ç—å (% –≥–æ–¥–æ–≤—ã—Ö)')
                        }
                      </label>
                      <input
                        type="number"
                        step={parameters.costType === 'upfront' ? '1000' : '0.1'}
                        value={parameters.cost || ''}
                        onChange={(e) => {
                          setParameters({ ...parameters, cost: Number(e.target.value) });
                          setValidationErrors({ ...validationErrors, cost: false });
                        }}
                        placeholder={parameters.costType === 'upfront' ? '–ù–∞–ø—Ä–∏–º–µ—Ä: 300000' : '–ù–∞–ø—Ä–∏–º–µ—Ä: 1.0'}
                        className={getInputClassName('cost')}
                      />
                    </div>
                  </>
                )}

                {selectedType === 'COLLAR' && (
                  <>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (%)
                      </label>
                      <input
                        type="number"
                        step="0.1"
                        value={parameters.cap || ''}
                        onChange={(e) => {
                          setParameters({ ...parameters, cap: Number(e.target.value) });
                          setValidationErrors({ ...validationErrors, cap: false });
                        }}
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 18.0"
                        className={getInputClassName('cap')}
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (%)
                      </label>
                      <input
                        type="number"
                        step="0.1"
                        value={parameters.floor || ''}
                        onChange={(e) => {
                          setParameters({ ...parameters, floor: Number(e.target.value) });
                          setValidationErrors({ ...validationErrors, floor: false });
                        }}
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 10.0"
                        className={getInputClassName('floor')}
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        –¢–∏–ø –æ–ø–ª–∞—Ç—ã
                      </label>
                      <select
                        value={parameters.costType || 'annual'}
                        onChange={(e) => {
                          setParameters({ ...parameters, costType: e.target.value as 'upfront' | 'annual' });
                        }}
                        className={getInputClassName('costType')}
                      >
                        <option value="annual">–ü—Ä–æ—Ü–µ–Ω—Ç—ã –≥–æ–¥–æ–≤—ã—Ö</option>
                        <option value="upfront">–ï–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–∏</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        {parameters.costType === 'upfront' ? '–°—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)' : '–°—Ç–æ–∏–º–æ—Å—Ç—å (% –≥–æ–¥–æ–≤—ã—Ö)'}
                      </label>
                      <input
                        type="number"
                        step={parameters.costType === 'upfront' ? '1000' : '0.1'}
                        value={parameters.cost || ''}
                        onChange={(e) => {
                          setParameters({ ...parameters, cost: Number(e.target.value) });
                          setValidationErrors({ ...validationErrors, cost: false });
                        }}
                        placeholder={parameters.costType === 'upfront' ? '–ù–∞–ø—Ä–∏–º–µ—Ä: 200000' : '–ù–∞–ø—Ä–∏–º–µ—Ä: 0.5'}
                        className={getInputClassName('cost')}
                      />
                    </div>
                  </>
                )}
              </>
            )}

            <div className="flex justify-end space-x-2 pt-2">
              <Button
                onClick={() => {
                  setShowAddForm(false);
                  setSelectedType('');
                  setParameters({});
                  setValidationErrors({});
                }}
                variant="ghost"
                size="sm"
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button
                onClick={handleAddInstrument}
                variant="primary"
                size="sm"
              >
                –î–æ–±–∞–≤–∏—Ç—å
              </Button>
            </div>
          </div>
        </div>
      )}

    </Card>
  );
}